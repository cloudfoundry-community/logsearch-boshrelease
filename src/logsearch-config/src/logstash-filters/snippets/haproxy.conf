if [syslog_program] == "ls-router" {
  grok {
    match => { "@message" => "%{IP:[haproxy][client_ip]}:%{INT:[haproxy][client_port]:int} \[%{DATA:[haproxy][accept_date]}\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} %{INT:[haproxy][time_queue_ms]:int}/%{INT:[haproxy][time_backend_connect_ms]:int}/%{NOTSPACE:[haproxy][time_duration_ms]:int} %{NOTSPACE:[haproxy][bytes_read]:int} %{NOTSPACE:[haproxy][termination_state]} %{INT:[haproxy][actconn]:int}/%{INT:[haproxy][feconn]:int}/%{INT:[haproxy][beconn]:int}/%{INT:[haproxy][srvconn]:int}/%{NOTSPACE:[haproxy][retries]:int} %{INT:[haproxy][srv_queue]:int}/%{INT:[haproxy][backend_queue]:int}" }
    match => { "@message" => "%{IP:[haproxy][client_ip]}:%{INT:[haproxy][client_port]:int} \[%{DATA:[haproxy][accept_date]}\] %{NOTSPACE:[haproxy][frontend_name]}:%{SPACE}%{GREEDYDATA:[haproxy][message]}" }
    match => { "@message" => "%{GREEDYDATA:[haproxy][message]}" }
    add_tag => [ "haproxy" ]
    remove_field => ["@message"]
    tag_on_failure => "fail/haproxy/grok"
  }

  date {
    match => [ "[haproxy][accept_date]", "dd/MMM/YYYY:HH:mm:ss.SSS" ]
    target => "[haproxy][accept_date]"
  }

#Add some helpful descripions for the termination state
  translate {
    dictionary => [
      "CD", "Session unexpectedly aborted by client",
      "cD", "Client-side timeout expired",
      "sD", "Server-side timeout expired"
    ]
    field => "[haproxy][termination_state]"
    destination => "@message"
  }

  mutate {
    add_field => [ "[@source][job]", "ls-router" ]
  }
}
