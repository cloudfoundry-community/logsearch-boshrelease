# Parse BOSH NATS logs
if [syslog_program] == "nats_to_syslog" {
  json {
    source => "@message"
    target => "NATS"
    add_field => { "[@level]" => "INFO" }
    add_tag => ["NATS"]
    remove_field => ["@message"]
  }

  if "_jsonparsefailure" in [tags] {
    mutate {
      add_tag => "fail/bosh_nats/json"
      remove_tag => "_jsonparsefailure"
    }
  } else {

    json {
      source => "[NATS][Data]"
      target => "[NATS][Data]"
    }

    if "_jsonparsefailure" in [tags] {
      mutate {
        add_tag => "fail/bosh_nats/Data/json"
        remove_tag => "_jsonparsefailure"
      }
    } else {
      if [NATS][Subject] =~ /hm\.agent\.heartbeat.*/ {
        mutate {
          add_field => { "[@source][vm]" => "%{[NATS][Data][job]}/%{[NATS][Data][index]}" }
          add_tag => ["hm_agent_heartbeat"]
        }
        mutate {
          rename => { "[NATS][Data][job]" => "[@source][job]" }
          rename => { "[NATS][Data][index]" => "[@source][index]" }
        }

        mutate {
          convert => { "[NATS][Data][vitals][cpu][sys]" => "float" }
          convert => { "[NATS][Data][vitals][cpu][user]" => "float" }
          convert => { "[NATS][Data][vitals][cpu][wait]" => "float" }
          convert => { "[NATS][Data][vitals][disk][ephemeral][inode_percent]" => "float" }
          convert => { "[NATS][Data][vitals][disk][ephemeral][percent]" => "float" }
          convert => { "[NATS][Data][vitals][disk][system][inode_percent]" => "float" }
          convert => { "[NATS][Data][vitals][disk][system][percent]" => "float" }
          convert => { "[NATS][Data][vitals][mem][kb]" => "float" }
          convert => { "[NATS][Data][vitals][mem][percent]" => "float" }
          convert => { "[NATS][Data][vitals][swap][kb]" => "float" }
          convert => { "[NATS][Data][vitals][swap][percent]" => "float" }
        }
        if [NATS][Data][vitals][disk][persistent] {
          mutate {
            convert => { "[NATS][Data][vitals][disk][persistent][inode_percent]" => "float" }
            convert => { "[NATS][Data][vitals][disk][persistent][percent]" => "float" }
          }
        }
        ruby {
             code => "event['NATS']['Data']['vitals']['load'] = { 'avg01' => event['NATS']['Data']['vitals']['load'][0].to_f, 'avg05' => event['NATS']['Data']['vitals']['load'][1].to_f, 'avg15' =>\
      event['NATS']['Data']['vitals']['load'][2].to_f }"
        }
      } else if [NATS][Subject] =~ /hm\.(director|agent)\.alert.*/ {
        mutate {
          add_tag => "hm_alert"
        }
        date {
          match => [ "[NATS][Data][created_at]", "UNIX" ]
          tag_on_failure => "fail/NATS/hm_alert/date"
          remove_field => "[NATS][Data][created_at]"
        }
        translate {
          field => "[NATS][Data][severity]"
          destination => "[@level]"
          override => true
          dictionary => [
            "1", "FATAL",
            "2", "FATAL",
            "3", "ERROR",
            "4", "WARN" ]
          fallback => "INFO"
        }
      }
    }
  }
}
