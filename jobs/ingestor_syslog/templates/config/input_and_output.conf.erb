input {
  <% if p("logstash_ingestor.syslog.port") %>
  tcp {
    add_field => [ "type", "syslog" ]
    host => "0.0.0.0"
    port => "<%= p("logstash_ingestor.syslog.port") %>"
  }
  udp {
    add_field => [ "type", "syslog" ]
    host => "0.0.0.0"
    port => "<%= p("logstash_ingestor.syslog.port") %>"
  }
  <% end %>

  <% if_p("logstash_ingestor.syslog_tls.port") do | port | %>
  tcp {
    add_field => [ "type", "syslog" ]
    host => "0.0.0.0"
    port => "<%= port %>"
    ssl_enable => true
    <% if p("logstash_ingestor.syslog_tls.skip_ssl_validation") %>
    ssl_verify => false
    <% end %>
    ssl_cert => "/var/vcap/jobs/ingestor_syslog/config/syslog_tls.crt"
    ssl_key => "/var/vcap/jobs/ingestor_syslog/config/syslog_tls.key"
  }
  <% end %>

  <% if_p("logstash_ingestor.relp.port") do | port | %>
  relp {
    add_field => { "_logstash_input" => "relp" }
    host => "0.0.0.0"
    port => "<%= port %>"
  }
  <% end %>

  <% p("logstash_parser.inputs", []).each do | input | %>
      <%= input["plugin"] %> {
        <% input["options"].each do | k, v | %>
          <%= k %> => <%= v.inspect %>
        <% end %>
      }
  <% end %>
}

output {
    <% if p("logstash_parser.debug") %>
        stdout {
            codec => "json"
        }
    <% end %>

    <% p('logstash_parser.outputs').each do | output | %>
        <%= output['plugin'] %> {
        <% if 'elasticsearch' == output['plugin'] %>
            <%
              options = {
                "hosts" => [ p('logstash_parser.elasticsearch.data_hosts').map { |ip| "#{ip}:9200" }.join(',') ],
                "index" => p('logstash_parser.elasticsearch.index'),
                "document_type" => p('logstash_parser.elasticsearch.index_type'),
                "manage_template" => false
              }
              if p('logstash_parser.elasticsearch.idle_flush_time', nil)
                options['idle_flush_time'] = p('logstash_parser.elasticsearch.idle_flush_time')
              end
              if p('logstash_parser.elasticsearch.document_id', nil)
                options['document_id'] = p('logstash_parser.elasticsearch.document_id')
              end
              if p('logstash_parser.elasticsearch.routing', nil)
                options['routing'] = p('logstash_parser.elasticsearch.routing')
              end
              output['options'] = options.merge(output['options'])
            %>
        <% end %>
        <% output['options'].each do | k, v | %>
          <%= k %> => <%= v.inspect %>
        <% end %>
        }
    <% end %>
}
