input {
  <% if p("logstash_ingestor.syslog.port") %>
  tcp {
    add_field => [ "type", "syslog" ]
    host => "0.0.0.0"
    port => "<%= p("logstash_ingestor.syslog.port") %>"
  }
  udp {
    add_field => [ "type", "syslog" ]
    host => "0.0.0.0"
    port => "<%= p("logstash_ingestor.syslog.port") %>"
  }
  <% end %>

  <% if_p("logstash_ingestor.syslog_tls.port") do | port | %>
  tcp {
    add_field => [ "type", "syslog" ]
    host => "0.0.0.0"
    port => "<%= port %>"
    ssl_enable => true
    ssl_cert => "/var/vcap/jobs/ingestor_syslog/config/syslog_tls.crt"
    ssl_key => "/var/vcap/jobs/ingestor_syslog/config/syslog_tls.key"
  }
  <% end %>

  <% if_p("logstash_ingestor.relp.port") do | port | %>
  relp {
    add_field => { "_logstash_input" => "relp" }
    host => "0.0.0.0"
    port => "<%= port %>"
  }
  <% end %>
}

filter {
  # drop empty logs (eg: monit connection healthcheck)
  ruby {
    code => 'event.cancel if event["message"] == "\u0000"'
  }

  #When behind haproxy, this is always the IP of the haproxy, not the IP of the actual host sending the data.
  #Remove it to avoid confusion
  mutate {
    remove_field => [ "host" ]
  }
  <% if 'DEBUG' == p('logstash.metadata_level') %>
  mutate {
    add_field => { "[@ingestor][service]" => "syslog" }
    add_field => { "[@ingestor][job]" => "<%= name %>/<%= index %>" }
  }
  ruby {
    code => "event['@ingestor']['timestamp'] = Time.now.iso8601(3)"
  }
  <% end %>

  #
  # Injected custom filters below from logstash_inject.filters manifest property
  #
  <%= p('logstash_ingestor.filters') %>
}

output {
  <% if p("logstash_ingestor.debug") %>
    stdout {
      codec => "json"
    }
  <% end %>

  <% if_p("logstash_ingestor.outputs") do |ingestor_outputs| %>
    <% ingestor_outputs.each do |output| %>
      <%= output['plugin'] %> {
        <%
          if 'redis' == output['plugin']
            options = {
              "host" => p('redis.host'),
              "port" => p('redis.port'),
              "data_type" => "list",
              "key" => p('redis.key'),
              "batch" => true,
              "batch_events" => 50,
            }
            if_p('redis.congestion_interval') do |interval|
              options['congestion_interval'] = interval
            end
            if_p('redis.congestion_threshold') do |threshold|
              options['congestion_threshold'] = threshold
            end
            output['options'] = options.merge(output['options'])
          end
        %>
        <% output['options'].each do | k, v | %>
          <%= k %> => <%= v.inspect %>
        <% end %>
      }
    <% end %>
  <% end %>

  <% if p('archiver.enabled') %>
    redis {
      host => "<%= p("redis.host") %>"
      port => "<%= p("redis.port") %>"
      data_type => "list"
      key => "<%= p("redis.key") %>_archiver"
      batch => true
      batch_events => 50
    }
  <% end %>
}
